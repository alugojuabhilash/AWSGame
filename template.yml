AWSTemplateFormatVersion: '2010-09-09'
Description: 'Number Guessing Game Infrastructure'

Parameters:

  Environment:
    Type: String
    Description: Environment name
    Default: 'prod'
    AllowedValues: ['dev', 'prod']
  BucketName:
    Type: String
    Description: Name for the S3 bucket that will host the website
  DomainName:
    Type: String
    Description: Domain name for the CloudFront distribution
    Default: 'guessnumbergame.com'
  LambdaS3BucketName:
    Type: String
    Description: S3 bucket containing the Lambda code 
    Default: mylambda-number-guess

Resources:
  # S3 Bucket for Website Hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET']
            AllowedOrigins: ['*']
            MaxAge: 3000


  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  ScoresTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain  # Add this to retain the data
    UpdateReplacePolicy: Retain  # Add this to retain the data during replacement
    Properties:
      # Remove the fixed TableName and let CloudFormation generate it
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  HighScoreTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-high-scores

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub '${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com'
            Id: S3Origin
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
              HTTPSPort: 443
              OriginSSLProtocols: 
                - TLSv1.2
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100


  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AWS::StackName}-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - !Sub https://${DomainName}/callback.html
      LogoutURLs:
        - !Sub https://${DomainName}/index.html
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
      UserPoolId: !Ref UserPool

  # DynamoDB Table for Game Scores


  # Lambda Function
  GameFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-game
      Runtime: python3.12
      Handler: game.lambda_handler
      Code:
        S3Bucket: !Ref LambdaS3BucketName
        S3Key: game.zip
      Environment:
        Variables:
          SCORES_TABLE: !Ref ScoresTable
          SNS_TOPIC_ARN: !Ref HighScoreTopic
          CORS_ORIGIN: !Sub http://${WebsiteBucket.WebsiteURL}

      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GameFunctionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource: !GetAtt ScoresTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref HighScoreTopic
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/game/config
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  # API Gateway
  GameAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: API for Number Guessing Game

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref GameAPI
      ProviderARNs:
        - !GetAtt UserPool.Arn

  GameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GameAPI
      ParentId: !GetAtt GameAPI.RootResourceId
      PathPart: 'game'

  GameMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GameAPI
      ResourceId: !Ref GameResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: "'true'"

  GameMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GameAPI
      ResourceId: !Ref GameResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameFunction.Arn}/invocations

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GameMethodPost
      - GameMethodOptions
    Properties:
      RestApiId: !Ref GameAPI

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref GameAPI
      StageName: !Ref Environment

  # Lambda Permission for API Gateway
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GameFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GameAPI}/*/*/*

Outputs:
  WebsiteURL:
    Description: URL for website hosted on S3
    Value: !GetAtt WebsiteBucket.WebsiteURL

  ApiEndpoint:
    Description: API Gateway Endpoint
    Value: !Sub https://${GameAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/game

  CloudFrontURL:
    Description: URL for CloudFront distribution
    Value: !Sub https://${CloudFrontDistribution.DomainName}

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  CognitoDomain:
    Description: Cognito User Pool Domain
    Value: !Sub ${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
  ScoresTableName:
    Description: DynamoDB Table Name
    Value: !Ref ScoresTable
  HighScoreTopicArn:
    Description: SNS Topic ARN
    Value: !Ref HighScoreTopic
